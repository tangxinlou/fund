按位运算符:
~:对二进制补码操作，符号位也会取反。 
|:对补码操作，有1则为1，全0则为0.    和逻辑或不能弄混
&:
^:相同为0，不同为1
  可以用来数据交换  
  a = a ^ b;
  b = a ^ b;
  a = a ^ b;  
>>:无符号数据，最高位补0
   有符号正数，最高位也是补0
   有符号负数，ubuntu中最高位补1
<<:
   1 << 5
   
输入输出:
什么输入:又叫做读，数据从硬件传递给应用程序(真正交给的是缓存区)。
什么输出:又叫做写，数据从应用程序传递给硬件(先写到缓存区中)。

printf("格式控制串",); %d %x %c %f %s  %#x %lld  %5d  %.2f 

scanf("%d,%d",&a,&b);
10,20

int getchar(void); 从终端获取一个字符

ch = getchar();
if(ch == EOF)
{
	报错
}

putchar(97);
putchar('a'+1);
char a = 'w';
putchar(a);

char str[10];
gets(str);
puts(str);

if语句:
简单形式
if(表达式)
{
	语句块;
}
else
{
	语句块;
}

阶梯形式
if(表达式1)
{
	语句块1
}
else if(表达式2)
{
	语句块2；
}
else
{
	语句块3;
}

嵌套形式
if()
{
	if()
	{
		
	}
	else
	{
		if()
		{
			
		}
	}
}
else
{
	if()
	{
	
	}
	else
	{
	
	}
}

分支语句中的switch语句

switch(表达式或者变量)  判断表达式或者变量的值
{
	case 常量表达式1:
		语句块1;
		break; 
	case 常量表达式2:
		语句块2;
		break;
	case 常量表达式3:
		语句块3;
		break;
	case 常量表达式4:
	case 常量表达式5:
		语句块5;
		break;
	default:
		语句块4;
}

break可以跳出switch语句。
不同分支对应的常量表达式不能相同。但是不同分支下执行的语句可能相同。

ATM取款机:
假设有一个菜单:

while(1)
{
	printf("请选择:1.查询  2.存款  3.取款  0.退出\n");


}

控制语句――循环语句
当某个功能需要重复执行时，会使用到循环语句。
while(表达式)
{
	语句块;
}
当表达式成立时执行语句块，否则跳过循环。

do  while 

for(表达式1;表达式2;表达式3)
{
	语句块;
} 
执行逻辑:
1、执行表达式1
2、判断表达式2
3、如果表达式2不成立则循环退出
   如果表达式2成立，执行语句块
4、执行表达式3
5、判断表达式2是否成立
6、如果表达式2不成立则循环退出
   如果表达式2成立，执行语句块
7、执行表达式3

for循环的使用格式:
表达式1
for(;表达式2;表达式3)
{
	语句块;
}


for(;表达式2;)
{
	语句块;
	表达式3;
}

for(;;)  <==> while(1)
{

}

作业:
1、循环从终端输入整数，在循环体中求出奇数的个数以及偶数的个数，当输入值为0时循环退出。
2、假设100 - 1000这个范围内求出个位的立方 + 十位的立方 + 百位的立方 == 数字本身
假设 123 == 1^3 + 2^3 + 3^3;

3、在1 - 10000数字范围内，求出一种数字，规则是所有约数(不包含本身)的和 == 数字本身。 
   6 约数：1 + 2 + 3 
   
4、
从终端输入一个字符，比如是F，要求只能输出大写字母。
打印出以下格式:
F
*FE
**FED
***FEDC
****FEDCB
*****FEDCBA
   



















