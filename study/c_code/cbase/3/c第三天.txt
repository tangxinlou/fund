计算机模型:冯诺依曼、哈弗

冯结构:代码分段：代码段、数据段、bss段、只读数据段、栈、堆

数据类型
基本类型:char short int long float double  
构造类型:一维数组 二维数组 指针数组 结构体数组 函数指针数组
指针类型:一级指针 二级指针 三级指针 数组指针  结构体指针 函数指针 
空类型: void    

常量:
整型常量:  
浮点常量:0.123 .123
指数常量:1.1E5 
字符常量:'\0' '\n'  ' '  '0'  'A' 'a'        man ascii
字符串常量:"abcde"
			char str[] = "abcde" 存放于栈区
			char *p = "abcde"  只读数据段
			
			gcc -c 1.c -o 1.o 
			objdump -s 1.o
标识常量:所谓的宏
1、基本用法   #define N 10 
2、#define N 5 + 5

强转: 在赋值语句中使用强转
	  赋值语句特性是 = 两边类型完全一致。如果不一致右端照着左端类型抄到右端加小括号
	  
	  xxx a;
	  yyy b;
	  a = (xxx)b;

变量
定义方法:存储类型 数据类型 变量名;

存储类型:auto register extern static 

全局变量:在函数外面定义
局部变量:在函数内部定义

auto:只能在局部变量中使用，只能修饰动态变量，如果没有初始化默认值是随机值。
register:只能在变量中使用，修饰动态变量，修饰的变量提高运行效率

extern:引用其他文件的全局变量，全局函数，全局数组。
static:1、如果修饰全局变量，这个变量不能被其他文件引用。
	   2、只能初始化一次。
	   
按照存储空间区分:
全局:一定是静态的

局部:动态局部
	 静态局部

运算符:
算数运算符: + - * / % ++ --

关系运算符: > >= < <= == != 
			a == 10 

逻辑运算符: && || !

条件运算符: 表达式1 ? 表达式2 : 表达式3

位运算符: ~ | & ^ >> << 

int a = -10;

按位取反时符号位变。但是原码转化为反码符号位不变。

-10原码: 1 27个0 1010 
-10补码: 1 27个1 0110

如果执行~a;
假设对原码取反: 0 27个1 0101
假设对补码取反: 28个0 1001

总结:按位取反是对补码操作。取反后是原码。

按位或:   和逻辑或分开
01010 
10100

按位与:
01010 
10100
00000

按位异或: ^  不同为1，相同为0
1100
1010
0110

数据交换:
  01010 
^ 10100
  11110 
  
  11110
  01010
  10100   20 

  11110
  10100
  01010   10
  
  
按位右移: >> 
int a = 10;
a >> 2;
0 27个0 1010 >> 2   ==> 000 27个0 10

int a = -2 
原码移动:1 27个0  0010 >> 2  ==> 001 29个0
补码移动:1 30个1  0  >> 2   ==> 32个1 


按位左移：对补码操作
以后的左移操作全部是对无符号数据操作。  

总结:移动对补码操作，当前环境下如果是负数，最高位补1.

a += b   <==> a = a + b;

输入输出:
printf scanf
putchar getchar
puts gets 
从io进程课程之后除了printf函数其他函数几乎都不会使用了。

输入:也叫做读，数据从硬件设备上产生数据最终交给应用程序使用。
输出:也叫做写，数据从应用程序最终交给某种硬件

输入函数:scanf();

控制语句:
分支语句
if语句:简单模式、阶梯模式、嵌套模式
简单模式:
	if(表达式)
	{	
		语句块1;
	}  
	else
	{
		语句块2;
	}	
注意：else语句是不能单独使用的。它不能被其他语句将if和else分隔开。
阶梯模式:
	if(表达式1)
	{	
		语句块1;
	}	
	else if(表达式2)
	{
		语句块2;
	}	
	else 
	{
		语句块3;
	}
	
例子:假设从终端输入一个字符，如果是大写字母，输出"这是一个大写字母";如果是小写字母，输出"这是一个小写字母";
	 如果输入的是数字，输出"这是一个数字";
	
嵌套模式:
if(表达式1)
{
	if(表达式2)
	{
		
	}
	else 
	{
		if(表达式3)
		{
		
		}
	}
}
switch

循环语句





