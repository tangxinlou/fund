struct A
{
	int a;
	char b;
};

union A
{
	int a;
	char b;
};
相同点:
共用体的定义方式和结构体的定义方式完全一样
共用体变量引用成员的方式和结构体完全一样的(. ->)

不同点:
假设不考虑字节对齐，结构体空间大小是所有成员字节数的和;共用体空间大小是所有成员中最大的那个成员的空间
结构体可以直接初始化，但是共用体不能直接初始化。
struct A
{
	int a;
	char b;
}x = {
	100,
	'w'
};这是正确的

union A
{
	int a;
	char b;
}x = {
	100,
	'w'
};这是错误的,错误原因:这里的共用体一共为4个字节，但是这种初始化方式使其为5个字节。

union A
{
	int a;
	char b;
};
union A x;
x.a = 10;//这是正确的
x.b = 'w';//继续执行这句话，没有错，因为x.a和x.b是两步操作。
x.b的内容将原有的4个字节的最低字节替换掉。
